// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message_query.sql

package db

import (
	"context"
)

const changeDeliveryTipe = `-- name: ChangeDeliveryTipe :exec

UPDATE messages
set was_delivered = true where id=$1
`

func (q *Queries) ChangeDeliveryTipe(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, changeDeliveryTipe, id)
	return err
}

const createMessage = `-- name: CreateMessage :exec

INSERT INTO messages (room_id,
                      message_content,
                      message_owner,
                      was_delivered)
values ($1, $2, $3, $4)
`

type CreateMessageParams struct {
	RoomID         string `json:"room_id"`
	MessageContent string `json:"message_content"`
	MessageOwner   int32  `json:"message_owner"`
	WasDelivered   bool   `json:"was_delivered"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage,
		arg.RoomID,
		arg.MessageContent,
		arg.MessageOwner,
		arg.WasDelivered,
	)
	return err
}

const getAllUndeliveredMessages = `-- name: GetAllUndeliveredMessages :many

SELECT id, room_id, message_content, message_owner, created_at, was_delivered
from messages
where room_id = $1 and message_owner !=$2
  and was_delivered is false
order by created_at
`

type GetAllUndeliveredMessagesParams struct {
	RoomID       string `json:"room_id"`
	MessageOwner int32  `json:"message_owner"`
}

func (q *Queries) GetAllUndeliveredMessages(ctx context.Context, arg GetAllUndeliveredMessagesParams) ([]Message, error) {
	rows, err := q.db.Query(ctx, getAllUndeliveredMessages, arg.RoomID, arg.MessageOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.MessageContent,
			&i.MessageOwner,
			&i.CreatedAt,
			&i.WasDelivered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesForRoom = `-- name: GetMessagesForRoom :many

SELECT id, room_id, message_content, message_owner, created_at, was_delivered
from messages
where room_id = $1
`

func (q *Queries) GetMessagesForRoom(ctx context.Context, roomID string) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessagesForRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.MessageContent,
			&i.MessageOwner,
			&i.CreatedAt,
			&i.WasDelivered,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
